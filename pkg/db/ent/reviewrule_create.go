// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/review-service/pkg/db/ent/reviewrule"
	"github.com/google/uuid"
)

// ReviewRuleCreate is the builder for creating a ReviewRule entity.
type ReviewRuleCreate struct {
	config
	mutation *ReviewRuleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetObjectType sets the "object_type" field.
func (rrc *ReviewRuleCreate) SetObjectType(s string) *ReviewRuleCreate {
	rrc.mutation.SetObjectType(s)
	return rrc
}

// SetDomain sets the "domain" field.
func (rrc *ReviewRuleCreate) SetDomain(s string) *ReviewRuleCreate {
	rrc.mutation.SetDomain(s)
	return rrc
}

// SetRules sets the "rules" field.
func (rrc *ReviewRuleCreate) SetRules(s string) *ReviewRuleCreate {
	rrc.mutation.SetRules(s)
	return rrc
}

// SetNillableRules sets the "rules" field if the given value is not nil.
func (rrc *ReviewRuleCreate) SetNillableRules(s *string) *ReviewRuleCreate {
	if s != nil {
		rrc.SetRules(*s)
	}
	return rrc
}

// SetCreateAt sets the "create_at" field.
func (rrc *ReviewRuleCreate) SetCreateAt(u uint32) *ReviewRuleCreate {
	rrc.mutation.SetCreateAt(u)
	return rrc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (rrc *ReviewRuleCreate) SetNillableCreateAt(u *uint32) *ReviewRuleCreate {
	if u != nil {
		rrc.SetCreateAt(*u)
	}
	return rrc
}

// SetUpdateAt sets the "update_at" field.
func (rrc *ReviewRuleCreate) SetUpdateAt(u uint32) *ReviewRuleCreate {
	rrc.mutation.SetUpdateAt(u)
	return rrc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (rrc *ReviewRuleCreate) SetNillableUpdateAt(u *uint32) *ReviewRuleCreate {
	if u != nil {
		rrc.SetUpdateAt(*u)
	}
	return rrc
}

// SetDeleteAt sets the "delete_at" field.
func (rrc *ReviewRuleCreate) SetDeleteAt(u uint32) *ReviewRuleCreate {
	rrc.mutation.SetDeleteAt(u)
	return rrc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (rrc *ReviewRuleCreate) SetNillableDeleteAt(u *uint32) *ReviewRuleCreate {
	if u != nil {
		rrc.SetDeleteAt(*u)
	}
	return rrc
}

// SetID sets the "id" field.
func (rrc *ReviewRuleCreate) SetID(u uuid.UUID) *ReviewRuleCreate {
	rrc.mutation.SetID(u)
	return rrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rrc *ReviewRuleCreate) SetNillableID(u *uuid.UUID) *ReviewRuleCreate {
	if u != nil {
		rrc.SetID(*u)
	}
	return rrc
}

// Mutation returns the ReviewRuleMutation object of the builder.
func (rrc *ReviewRuleCreate) Mutation() *ReviewRuleMutation {
	return rrc.mutation
}

// Save creates the ReviewRule in the database.
func (rrc *ReviewRuleCreate) Save(ctx context.Context) (*ReviewRule, error) {
	var (
		err  error
		node *ReviewRule
	)
	rrc.defaults()
	if len(rrc.hooks) == 0 {
		if err = rrc.check(); err != nil {
			return nil, err
		}
		node, err = rrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReviewRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rrc.check(); err != nil {
				return nil, err
			}
			rrc.mutation = mutation
			if node, err = rrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rrc.hooks) - 1; i >= 0; i-- {
			if rrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rrc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rrc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ReviewRule)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReviewRuleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *ReviewRuleCreate) SaveX(ctx context.Context) *ReviewRule {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrc *ReviewRuleCreate) Exec(ctx context.Context) error {
	_, err := rrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrc *ReviewRuleCreate) ExecX(ctx context.Context) {
	if err := rrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rrc *ReviewRuleCreate) defaults() {
	if _, ok := rrc.mutation.Rules(); !ok {
		v := reviewrule.DefaultRules
		rrc.mutation.SetRules(v)
	}
	if _, ok := rrc.mutation.CreateAt(); !ok {
		v := reviewrule.DefaultCreateAt()
		rrc.mutation.SetCreateAt(v)
	}
	if _, ok := rrc.mutation.UpdateAt(); !ok {
		v := reviewrule.DefaultUpdateAt()
		rrc.mutation.SetUpdateAt(v)
	}
	if _, ok := rrc.mutation.DeleteAt(); !ok {
		v := reviewrule.DefaultDeleteAt()
		rrc.mutation.SetDeleteAt(v)
	}
	if _, ok := rrc.mutation.ID(); !ok {
		v := reviewrule.DefaultID()
		rrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrc *ReviewRuleCreate) check() error {
	if _, ok := rrc.mutation.ObjectType(); !ok {
		return &ValidationError{Name: "object_type", err: errors.New(`ent: missing required field "ReviewRule.object_type"`)}
	}
	if _, ok := rrc.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "ReviewRule.domain"`)}
	}
	if _, ok := rrc.mutation.Rules(); !ok {
		return &ValidationError{Name: "rules", err: errors.New(`ent: missing required field "ReviewRule.rules"`)}
	}
	if _, ok := rrc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "ReviewRule.create_at"`)}
	}
	if _, ok := rrc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "ReviewRule.update_at"`)}
	}
	if _, ok := rrc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "ReviewRule.delete_at"`)}
	}
	return nil
}

func (rrc *ReviewRuleCreate) sqlSave(ctx context.Context) (*ReviewRule, error) {
	_node, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rrc *ReviewRuleCreate) createSpec() (*ReviewRule, *sqlgraph.CreateSpec) {
	var (
		_node = &ReviewRule{config: rrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reviewrule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: reviewrule.FieldID,
			},
		}
	)
	_spec.OnConflict = rrc.conflict
	if id, ok := rrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rrc.mutation.ObjectType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reviewrule.FieldObjectType,
		})
		_node.ObjectType = value
	}
	if value, ok := rrc.mutation.Domain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reviewrule.FieldDomain,
		})
		_node.Domain = value
	}
	if value, ok := rrc.mutation.Rules(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reviewrule.FieldRules,
		})
		_node.Rules = value
	}
	if value, ok := rrc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: reviewrule.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := rrc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: reviewrule.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := rrc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: reviewrule.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReviewRule.Create().
//		SetObjectType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReviewRuleUpsert) {
//			SetObjectType(v+v).
//		}).
//		Exec(ctx)
//
func (rrc *ReviewRuleCreate) OnConflict(opts ...sql.ConflictOption) *ReviewRuleUpsertOne {
	rrc.conflict = opts
	return &ReviewRuleUpsertOne{
		create: rrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReviewRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rrc *ReviewRuleCreate) OnConflictColumns(columns ...string) *ReviewRuleUpsertOne {
	rrc.conflict = append(rrc.conflict, sql.ConflictColumns(columns...))
	return &ReviewRuleUpsertOne{
		create: rrc,
	}
}

type (
	// ReviewRuleUpsertOne is the builder for "upsert"-ing
	//  one ReviewRule node.
	ReviewRuleUpsertOne struct {
		create *ReviewRuleCreate
	}

	// ReviewRuleUpsert is the "OnConflict" setter.
	ReviewRuleUpsert struct {
		*sql.UpdateSet
	}
)

// SetObjectType sets the "object_type" field.
func (u *ReviewRuleUpsert) SetObjectType(v string) *ReviewRuleUpsert {
	u.Set(reviewrule.FieldObjectType, v)
	return u
}

// UpdateObjectType sets the "object_type" field to the value that was provided on create.
func (u *ReviewRuleUpsert) UpdateObjectType() *ReviewRuleUpsert {
	u.SetExcluded(reviewrule.FieldObjectType)
	return u
}

// SetDomain sets the "domain" field.
func (u *ReviewRuleUpsert) SetDomain(v string) *ReviewRuleUpsert {
	u.Set(reviewrule.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ReviewRuleUpsert) UpdateDomain() *ReviewRuleUpsert {
	u.SetExcluded(reviewrule.FieldDomain)
	return u
}

// SetRules sets the "rules" field.
func (u *ReviewRuleUpsert) SetRules(v string) *ReviewRuleUpsert {
	u.Set(reviewrule.FieldRules, v)
	return u
}

// UpdateRules sets the "rules" field to the value that was provided on create.
func (u *ReviewRuleUpsert) UpdateRules() *ReviewRuleUpsert {
	u.SetExcluded(reviewrule.FieldRules)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *ReviewRuleUpsert) SetCreateAt(v uint32) *ReviewRuleUpsert {
	u.Set(reviewrule.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *ReviewRuleUpsert) UpdateCreateAt() *ReviewRuleUpsert {
	u.SetExcluded(reviewrule.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *ReviewRuleUpsert) AddCreateAt(v uint32) *ReviewRuleUpsert {
	u.Add(reviewrule.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *ReviewRuleUpsert) SetUpdateAt(v uint32) *ReviewRuleUpsert {
	u.Set(reviewrule.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *ReviewRuleUpsert) UpdateUpdateAt() *ReviewRuleUpsert {
	u.SetExcluded(reviewrule.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *ReviewRuleUpsert) AddUpdateAt(v uint32) *ReviewRuleUpsert {
	u.Add(reviewrule.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *ReviewRuleUpsert) SetDeleteAt(v uint32) *ReviewRuleUpsert {
	u.Set(reviewrule.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *ReviewRuleUpsert) UpdateDeleteAt() *ReviewRuleUpsert {
	u.SetExcluded(reviewrule.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *ReviewRuleUpsert) AddDeleteAt(v uint32) *ReviewRuleUpsert {
	u.Add(reviewrule.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ReviewRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(reviewrule.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ReviewRuleUpsertOne) UpdateNewValues() *ReviewRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(reviewrule.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ReviewRule.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ReviewRuleUpsertOne) Ignore() *ReviewRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReviewRuleUpsertOne) DoNothing() *ReviewRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReviewRuleCreate.OnConflict
// documentation for more info.
func (u *ReviewRuleUpsertOne) Update(set func(*ReviewRuleUpsert)) *ReviewRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReviewRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetObjectType sets the "object_type" field.
func (u *ReviewRuleUpsertOne) SetObjectType(v string) *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetObjectType(v)
	})
}

// UpdateObjectType sets the "object_type" field to the value that was provided on create.
func (u *ReviewRuleUpsertOne) UpdateObjectType() *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateObjectType()
	})
}

// SetDomain sets the "domain" field.
func (u *ReviewRuleUpsertOne) SetDomain(v string) *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ReviewRuleUpsertOne) UpdateDomain() *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateDomain()
	})
}

// SetRules sets the "rules" field.
func (u *ReviewRuleUpsertOne) SetRules(v string) *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetRules(v)
	})
}

// UpdateRules sets the "rules" field to the value that was provided on create.
func (u *ReviewRuleUpsertOne) UpdateRules() *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateRules()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *ReviewRuleUpsertOne) SetCreateAt(v uint32) *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *ReviewRuleUpsertOne) AddCreateAt(v uint32) *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *ReviewRuleUpsertOne) UpdateCreateAt() *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *ReviewRuleUpsertOne) SetUpdateAt(v uint32) *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *ReviewRuleUpsertOne) AddUpdateAt(v uint32) *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *ReviewRuleUpsertOne) UpdateUpdateAt() *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *ReviewRuleUpsertOne) SetDeleteAt(v uint32) *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *ReviewRuleUpsertOne) AddDeleteAt(v uint32) *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *ReviewRuleUpsertOne) UpdateDeleteAt() *ReviewRuleUpsertOne {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *ReviewRuleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReviewRuleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReviewRuleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReviewRuleUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReviewRuleUpsertOne.ID is not supported by MySQL driver. Use ReviewRuleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReviewRuleUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReviewRuleCreateBulk is the builder for creating many ReviewRule entities in bulk.
type ReviewRuleCreateBulk struct {
	config
	builders []*ReviewRuleCreate
	conflict []sql.ConflictOption
}

// Save creates the ReviewRule entities in the database.
func (rrcb *ReviewRuleCreateBulk) Save(ctx context.Context) ([]*ReviewRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rrcb.builders))
	nodes := make([]*ReviewRule, len(rrcb.builders))
	mutators := make([]Mutator, len(rrcb.builders))
	for i := range rrcb.builders {
		func(i int, root context.Context) {
			builder := rrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReviewRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rrcb *ReviewRuleCreateBulk) SaveX(ctx context.Context) []*ReviewRule {
	v, err := rrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrcb *ReviewRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := rrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrcb *ReviewRuleCreateBulk) ExecX(ctx context.Context) {
	if err := rrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReviewRule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReviewRuleUpsert) {
//			SetObjectType(v+v).
//		}).
//		Exec(ctx)
//
func (rrcb *ReviewRuleCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReviewRuleUpsertBulk {
	rrcb.conflict = opts
	return &ReviewRuleUpsertBulk{
		create: rrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReviewRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rrcb *ReviewRuleCreateBulk) OnConflictColumns(columns ...string) *ReviewRuleUpsertBulk {
	rrcb.conflict = append(rrcb.conflict, sql.ConflictColumns(columns...))
	return &ReviewRuleUpsertBulk{
		create: rrcb,
	}
}

// ReviewRuleUpsertBulk is the builder for "upsert"-ing
// a bulk of ReviewRule nodes.
type ReviewRuleUpsertBulk struct {
	create *ReviewRuleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReviewRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(reviewrule.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ReviewRuleUpsertBulk) UpdateNewValues() *ReviewRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(reviewrule.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReviewRule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ReviewRuleUpsertBulk) Ignore() *ReviewRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReviewRuleUpsertBulk) DoNothing() *ReviewRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReviewRuleCreateBulk.OnConflict
// documentation for more info.
func (u *ReviewRuleUpsertBulk) Update(set func(*ReviewRuleUpsert)) *ReviewRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReviewRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetObjectType sets the "object_type" field.
func (u *ReviewRuleUpsertBulk) SetObjectType(v string) *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetObjectType(v)
	})
}

// UpdateObjectType sets the "object_type" field to the value that was provided on create.
func (u *ReviewRuleUpsertBulk) UpdateObjectType() *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateObjectType()
	})
}

// SetDomain sets the "domain" field.
func (u *ReviewRuleUpsertBulk) SetDomain(v string) *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ReviewRuleUpsertBulk) UpdateDomain() *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateDomain()
	})
}

// SetRules sets the "rules" field.
func (u *ReviewRuleUpsertBulk) SetRules(v string) *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetRules(v)
	})
}

// UpdateRules sets the "rules" field to the value that was provided on create.
func (u *ReviewRuleUpsertBulk) UpdateRules() *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateRules()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *ReviewRuleUpsertBulk) SetCreateAt(v uint32) *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *ReviewRuleUpsertBulk) AddCreateAt(v uint32) *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *ReviewRuleUpsertBulk) UpdateCreateAt() *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *ReviewRuleUpsertBulk) SetUpdateAt(v uint32) *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *ReviewRuleUpsertBulk) AddUpdateAt(v uint32) *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *ReviewRuleUpsertBulk) UpdateUpdateAt() *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *ReviewRuleUpsertBulk) SetDeleteAt(v uint32) *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *ReviewRuleUpsertBulk) AddDeleteAt(v uint32) *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *ReviewRuleUpsertBulk) UpdateDeleteAt() *ReviewRuleUpsertBulk {
	return u.Update(func(s *ReviewRuleUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *ReviewRuleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReviewRuleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReviewRuleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReviewRuleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
