// Code generated by ent, DO NOT EDIT.

package reviewrule

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/review-service/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ObjectType applies equality check predicate on the "object_type" field. It's identical to ObjectTypeEQ.
func ObjectType(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectType), v))
	})
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// Rules applies equality check predicate on the "rules" field. It's identical to RulesEQ.
func Rules(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRules), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// ObjectTypeEQ applies the EQ predicate on the "object_type" field.
func ObjectTypeEQ(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectType), v))
	})
}

// ObjectTypeNEQ applies the NEQ predicate on the "object_type" field.
func ObjectTypeNEQ(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldObjectType), v))
	})
}

// ObjectTypeIn applies the In predicate on the "object_type" field.
func ObjectTypeIn(vs ...string) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldObjectType), v...))
	})
}

// ObjectTypeNotIn applies the NotIn predicate on the "object_type" field.
func ObjectTypeNotIn(vs ...string) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldObjectType), v...))
	})
}

// ObjectTypeGT applies the GT predicate on the "object_type" field.
func ObjectTypeGT(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldObjectType), v))
	})
}

// ObjectTypeGTE applies the GTE predicate on the "object_type" field.
func ObjectTypeGTE(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldObjectType), v))
	})
}

// ObjectTypeLT applies the LT predicate on the "object_type" field.
func ObjectTypeLT(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldObjectType), v))
	})
}

// ObjectTypeLTE applies the LTE predicate on the "object_type" field.
func ObjectTypeLTE(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldObjectType), v))
	})
}

// ObjectTypeContains applies the Contains predicate on the "object_type" field.
func ObjectTypeContains(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldObjectType), v))
	})
}

// ObjectTypeHasPrefix applies the HasPrefix predicate on the "object_type" field.
func ObjectTypeHasPrefix(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldObjectType), v))
	})
}

// ObjectTypeHasSuffix applies the HasSuffix predicate on the "object_type" field.
func ObjectTypeHasSuffix(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldObjectType), v))
	})
}

// ObjectTypeEqualFold applies the EqualFold predicate on the "object_type" field.
func ObjectTypeEqualFold(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldObjectType), v))
	})
}

// ObjectTypeContainsFold applies the ContainsFold predicate on the "object_type" field.
func ObjectTypeContainsFold(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldObjectType), v))
	})
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomain), v))
	})
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDomain), v...))
	})
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDomain), v...))
	})
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomain), v))
	})
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomain), v))
	})
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomain), v))
	})
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomain), v))
	})
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDomain), v))
	})
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDomain), v))
	})
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDomain), v))
	})
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDomain), v))
	})
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDomain), v))
	})
}

// RulesEQ applies the EQ predicate on the "rules" field.
func RulesEQ(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRules), v))
	})
}

// RulesNEQ applies the NEQ predicate on the "rules" field.
func RulesNEQ(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRules), v))
	})
}

// RulesIn applies the In predicate on the "rules" field.
func RulesIn(vs ...string) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRules), v...))
	})
}

// RulesNotIn applies the NotIn predicate on the "rules" field.
func RulesNotIn(vs ...string) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRules), v...))
	})
}

// RulesGT applies the GT predicate on the "rules" field.
func RulesGT(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRules), v))
	})
}

// RulesGTE applies the GTE predicate on the "rules" field.
func RulesGTE(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRules), v))
	})
}

// RulesLT applies the LT predicate on the "rules" field.
func RulesLT(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRules), v))
	})
}

// RulesLTE applies the LTE predicate on the "rules" field.
func RulesLTE(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRules), v))
	})
}

// RulesContains applies the Contains predicate on the "rules" field.
func RulesContains(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRules), v))
	})
}

// RulesHasPrefix applies the HasPrefix predicate on the "rules" field.
func RulesHasPrefix(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRules), v))
	})
}

// RulesHasSuffix applies the HasSuffix predicate on the "rules" field.
func RulesHasSuffix(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRules), v))
	})
}

// RulesEqualFold applies the EqualFold predicate on the "rules" field.
func RulesEqualFold(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRules), v))
	})
}

// RulesContainsFold applies the ContainsFold predicate on the "rules" field.
func RulesContainsFold(v string) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRules), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...uint32) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...uint32) predicate.ReviewRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v uint32) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReviewRule) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReviewRule) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReviewRule) predicate.ReviewRule {
	return predicate.ReviewRule(func(s *sql.Selector) {
		p(s.Not())
	})
}
