// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/review-service/pkg/db/ent/reviewrule"
	"github.com/google/uuid"
)

// ReviewRule is the model entity for the ReviewRule schema.
type ReviewRule struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ObjectType holds the value of the "object_type" field.
	ObjectType string `json:"object_type,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// Rules holds the value of the "rules" field.
	Rules string `json:"rules,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReviewRule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case reviewrule.FieldCreateAt, reviewrule.FieldUpdateAt, reviewrule.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case reviewrule.FieldObjectType, reviewrule.FieldDomain, reviewrule.FieldRules:
			values[i] = new(sql.NullString)
		case reviewrule.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ReviewRule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReviewRule fields.
func (rr *ReviewRule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reviewrule.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rr.ID = *value
			}
		case reviewrule.FieldObjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field object_type", values[i])
			} else if value.Valid {
				rr.ObjectType = value.String
			}
		case reviewrule.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				rr.Domain = value.String
			}
		case reviewrule.FieldRules:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rules", values[i])
			} else if value.Valid {
				rr.Rules = value.String
			}
		case reviewrule.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				rr.CreateAt = uint32(value.Int64)
			}
		case reviewrule.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				rr.UpdateAt = uint32(value.Int64)
			}
		case reviewrule.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				rr.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ReviewRule.
// Note that you need to call ReviewRule.Unwrap() before calling this method if this ReviewRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (rr *ReviewRule) Update() *ReviewRuleUpdateOne {
	return (&ReviewRuleClient{config: rr.config}).UpdateOne(rr)
}

// Unwrap unwraps the ReviewRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rr *ReviewRule) Unwrap() *ReviewRule {
	_tx, ok := rr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReviewRule is not a transactional entity")
	}
	rr.config.driver = _tx.drv
	return rr
}

// String implements the fmt.Stringer.
func (rr *ReviewRule) String() string {
	var builder strings.Builder
	builder.WriteString("ReviewRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rr.ID))
	builder.WriteString("object_type=")
	builder.WriteString(rr.ObjectType)
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(rr.Domain)
	builder.WriteString(", ")
	builder.WriteString("rules=")
	builder.WriteString(rr.Rules)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", rr.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(fmt.Sprintf("%v", rr.UpdateAt))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(fmt.Sprintf("%v", rr.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// ReviewRules is a parsable slice of ReviewRule.
type ReviewRules []*ReviewRule

func (rr ReviewRules) config(cfg config) {
	for _i := range rr {
		rr[_i].config = cfg
	}
}
