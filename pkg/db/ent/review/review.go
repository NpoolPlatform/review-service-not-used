// Code generated by ent, DO NOT EDIT.

package review

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the review type in the database.
	Label = "review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldObjectType holds the string denoting the object_type field in the database.
	FieldObjectType = "object_type"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldObjectID holds the string denoting the object_id field in the database.
	FieldObjectID = "object_id"
	// FieldReviewerID holds the string denoting the reviewer_id field in the database.
	FieldReviewerID = "reviewer_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldTrigger holds the string denoting the trigger field in the database.
	FieldTrigger = "trigger"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// FieldDeleteAt holds the string denoting the delete_at field in the database.
	FieldDeleteAt = "delete_at"
	// Table holds the table name of the review in the database.
	Table = "reviews"
)

// Columns holds all SQL columns for review fields.
var Columns = []string{
	FieldID,
	FieldObjectType,
	FieldDomain,
	FieldAppID,
	FieldObjectID,
	FieldReviewerID,
	FieldState,
	FieldMessage,
	FieldTrigger,
	FieldCreateAt,
	FieldUpdateAt,
	FieldDeleteAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() uint32
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() uint32
	// UpdateDefaultUpdateAt holds the default value on update for the "update_at" field.
	UpdateDefaultUpdateAt func() uint32
	// DefaultDeleteAt holds the default value on creation for the "delete_at" field.
	DefaultDeleteAt func() uint32
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateWait     State = "wait"
	StateApproved State = "approved"
	StateRejected State = "rejected"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateWait, StateApproved, StateRejected:
		return nil
	default:
		return fmt.Errorf("review: invalid enum value for state field: %q", s)
	}
}
