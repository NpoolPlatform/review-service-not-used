// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/review-service/pkg/db/ent/review"
	"github.com/NpoolPlatform/review-service/pkg/db/ent/reviewrule"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   review.Table,
			Columns: review.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: review.FieldID,
			},
		},
		Type: "Review",
		Fields: map[string]*sqlgraph.FieldSpec{
			review.FieldObjectType: {Type: field.TypeString, Column: review.FieldObjectType},
			review.FieldDomain:     {Type: field.TypeString, Column: review.FieldDomain},
			review.FieldAppID:      {Type: field.TypeUUID, Column: review.FieldAppID},
			review.FieldObjectID:   {Type: field.TypeUUID, Column: review.FieldObjectID},
			review.FieldReviewerID: {Type: field.TypeUUID, Column: review.FieldReviewerID},
			review.FieldState:      {Type: field.TypeEnum, Column: review.FieldState},
			review.FieldMessage:    {Type: field.TypeString, Column: review.FieldMessage},
			review.FieldTrigger:    {Type: field.TypeString, Column: review.FieldTrigger},
			review.FieldCreateAt:   {Type: field.TypeUint32, Column: review.FieldCreateAt},
			review.FieldUpdateAt:   {Type: field.TypeUint32, Column: review.FieldUpdateAt},
			review.FieldDeleteAt:   {Type: field.TypeUint32, Column: review.FieldDeleteAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   reviewrule.Table,
			Columns: reviewrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: reviewrule.FieldID,
			},
		},
		Type: "ReviewRule",
		Fields: map[string]*sqlgraph.FieldSpec{
			reviewrule.FieldObjectType: {Type: field.TypeString, Column: reviewrule.FieldObjectType},
			reviewrule.FieldDomain:     {Type: field.TypeString, Column: reviewrule.FieldDomain},
			reviewrule.FieldRules:      {Type: field.TypeString, Column: reviewrule.FieldRules},
			reviewrule.FieldCreateAt:   {Type: field.TypeUint32, Column: reviewrule.FieldCreateAt},
			reviewrule.FieldUpdateAt:   {Type: field.TypeUint32, Column: reviewrule.FieldUpdateAt},
			reviewrule.FieldDeleteAt:   {Type: field.TypeUint32, Column: reviewrule.FieldDeleteAt},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (rq *ReviewQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReviewQuery builder.
func (rq *ReviewQuery) Filter() *ReviewFilter {
	return &ReviewFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReviewMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReviewMutation builder.
func (m *ReviewMutation) Filter() *ReviewFilter {
	return &ReviewFilter{config: m.config, predicateAdder: m}
}

// ReviewFilter provides a generic filtering capability at runtime for ReviewQuery.
type ReviewFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReviewFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ReviewFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(review.FieldID))
}

// WhereObjectType applies the entql string predicate on the object_type field.
func (f *ReviewFilter) WhereObjectType(p entql.StringP) {
	f.Where(p.Field(review.FieldObjectType))
}

// WhereDomain applies the entql string predicate on the domain field.
func (f *ReviewFilter) WhereDomain(p entql.StringP) {
	f.Where(p.Field(review.FieldDomain))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *ReviewFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(review.FieldAppID))
}

// WhereObjectID applies the entql [16]byte predicate on the object_id field.
func (f *ReviewFilter) WhereObjectID(p entql.ValueP) {
	f.Where(p.Field(review.FieldObjectID))
}

// WhereReviewerID applies the entql [16]byte predicate on the reviewer_id field.
func (f *ReviewFilter) WhereReviewerID(p entql.ValueP) {
	f.Where(p.Field(review.FieldReviewerID))
}

// WhereState applies the entql string predicate on the state field.
func (f *ReviewFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(review.FieldState))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *ReviewFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(review.FieldMessage))
}

// WhereTrigger applies the entql string predicate on the trigger field.
func (f *ReviewFilter) WhereTrigger(p entql.StringP) {
	f.Where(p.Field(review.FieldTrigger))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *ReviewFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(review.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *ReviewFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(review.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *ReviewFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(review.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (rrq *ReviewRuleQuery) addPredicate(pred func(s *sql.Selector)) {
	rrq.predicates = append(rrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReviewRuleQuery builder.
func (rrq *ReviewRuleQuery) Filter() *ReviewRuleFilter {
	return &ReviewRuleFilter{config: rrq.config, predicateAdder: rrq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReviewRuleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReviewRuleMutation builder.
func (m *ReviewRuleMutation) Filter() *ReviewRuleFilter {
	return &ReviewRuleFilter{config: m.config, predicateAdder: m}
}

// ReviewRuleFilter provides a generic filtering capability at runtime for ReviewRuleQuery.
type ReviewRuleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReviewRuleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ReviewRuleFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(reviewrule.FieldID))
}

// WhereObjectType applies the entql string predicate on the object_type field.
func (f *ReviewRuleFilter) WhereObjectType(p entql.StringP) {
	f.Where(p.Field(reviewrule.FieldObjectType))
}

// WhereDomain applies the entql string predicate on the domain field.
func (f *ReviewRuleFilter) WhereDomain(p entql.StringP) {
	f.Where(p.Field(reviewrule.FieldDomain))
}

// WhereRules applies the entql string predicate on the rules field.
func (f *ReviewRuleFilter) WhereRules(p entql.StringP) {
	f.Where(p.Field(reviewrule.FieldRules))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *ReviewRuleFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(reviewrule.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *ReviewRuleFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(reviewrule.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *ReviewRuleFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(reviewrule.FieldDeleteAt))
}
